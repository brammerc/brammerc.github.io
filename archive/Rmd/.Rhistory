expected$odd.uo <- expected$odd.u
expected <- expected[c("even.lo","even.l","even","even.u","even.uo","odd.lo","odd.l","odd","odd.u","odd.uo")]
bxp.dat <- as.data.frame(cbind(t(expected[,1:5]),t(expected[,6:10])))
colnames(bxp.dat) <- c("e1","e2","e3","e4","e5","e6","e7","e8","o1","o2","o3","o4","o5","o6","o7","o8")
bxp.dat <- bxp.dat[c("e1","o1","e2","o2","e3","o3","e4","o4","e5","o5","e6","o6","e7","o7","e8","o8")]
# Plot the difference of effects odd - even for each lane, represents the interaction
b.plot <- boxplot(data$value~data$oddeven + data$Lane,plot=FALSE) # Plot the same kind of graph (we will use the underlying $stats structure)
b.plot$stats <- as.data.frame(b.plot$stats)
b.plot$stats <- bxp.dat
boxplot(b.plot$stats, ylim=c(-1.0,1.0),at=c(1,2,4,5,7,8,10,11,13,14,16,17,19,20,22,23),whisklty=0,
staplelty=0, col=c("white","grey"),axes=FALSE,main=levels(lm.dat$Meet_ID)[e])
legend("bottomright",c("even","odd"),fill=c("white","grey"),cex=.8,bty="n", horiz=TRUE)
title(xlab="Lane",line=2.5)
title(ylab="Effect on split consistency (sec)",line=2.5)
axis(1,at=c(0,30),labels=c("",""),pos=-1.0,lwd.ticks=0)
axis(1,at=seq(1.5,23.5,3),labels=c(1,2,3,4,5,6,7,8),pos=-1.0,lwd=0, lwd.ticks=1)
axis(2,at=c(-1.0,1.0),labels=c("",""),pos=0,lwd.ticks=0)
axis(2,at=seq(-1.0,1.0,.5),labels=c(-1.0,-0.5,0.0,0.5,1.0),pos=0,lwd=0, lwd.ticks=1)
abline(h=0,col="black",lty=2)
}
library(car)
library(lmtest)
library(stats4)
library(leaps)
library(fields)
library(perturb)
library(sm)
library(reshape) #install.packages("reshape")
library(lme4)
head(lm.dat)
boxplot(lm.dat$value~lm.dat$variable)
# Boxplot of split difference by sex and oddeven for each meet
for(i in 1:length(levels(lm.dat[,2]))){
data <- subset(lm.dat,Meet_ID==levels(lm.dat[,2])[i])
boxplot(data$value~data$oddeven+data$Sex, main = levels(lm.dat[,2])[i])
}
# Boxplot of split difference by sex and lane+evenodd for each meet
par(mfrow=c(1,2)) #next, need to adjust the margins between the two plots.
for(i in 1:length(levels(lm.dat[,2]))){
data <- subset(lm.dat,Meet_ID==levels(lm.dat[,2])[i])
a <- table(data$Sex)
if(a[names(a)=="M"]!=0){
data2 <- subset(data,Sex=="M") # check to see if there was a men's 800 event
boxplot(data2$value~data2$Lane, main = levels(lm.dat[,2])[i], sub="Men") ##sub() isnt working
}
data3 <- subset(data,Sex=="W")
boxplot(data3$value~data3$Lane, main = levels(lm.dat[,2])[i], sub="Women")
}
par(mfrow=c(1,1))
source("S640FunsV3.r")
hist(lm.dat$value)
# QQ plot of difference values for each meet, men and women combined.
for(i in 1:length(levels(lm.dat$Meet))){
qqmore(lm.dat$value[ which(lm.dat$Meet == levels(lm.dat$Meet)[i])],
c("Q-Q Plot of Split Differences",levels(lm.dat$Meet)[i]))
}
# plots are with men and women combined
for(i in 1:length(levels(lm.dat$Meet))){
boxplot(lm.dat$value[lm.dat$Meet==levels(lm.dat$Meet)[i]],
ylab="Split differences (sec)",main=levels(lm.dat$Meet)[i])
boxplot(lm.dat$value[lm.dat$Meet==levels(lm.dat$Meet)[i]]~
lm.dat$oddeven[lm.dat$Meet==levels(lm.dat$Meet)[i]],
ylab="Split differences (sec)",main=levels(lm.dat$Meet)[i])
boxplot(lm.dat$value[lm.dat$Meet==levels(lm.dat$Meet)[i]]~
lm.dat$Lane[lm.dat$Meet==levels(lm.dat$Meet)[i]],
ylab="Split differences (sec)",main=levels(lm.dat$Meet)[i])
}
hist(lm.dat$value)
length(lm.dat$value)
# plots are with men and women combined
for(i in 1:length(levels(lm.dat$Meet))){
boxplot(lm.dat$value[lm.dat$Meet==levels(lm.dat$Meet)[i]],
ylab="Split differences (sec)",main=levels(lm.dat$Meet)[i])
boxplot(lm.dat$value[lm.dat$Meet==levels(lm.dat$Meet)[i]]~
lm.dat$oddeven[lm.dat$Meet==levels(lm.dat$Meet)[i]],
ylab="Split differences (sec)",main=levels(lm.dat$Meet)[i])
boxplot(lm.dat$value[lm.dat$Meet==levels(lm.dat$Meet)[i]]~
lm.dat$Lane[lm.dat$Meet==levels(lm.dat$Meet)[i]],
ylab="Split differences (sec)",main=levels(lm.dat$Meet)[i])
}
for(i in 1:length(levels(lm.dat$Meet))){
data <- lm.dat[lm.dat$Meet==levels(lm.dat$Meet)[i] & lm.dat$oddeven=="odd",]
boxplot(data$value~data$Lane, xlab="Lane", ylab="Split differences (sec)",ylim=c(-1,1),
main=c(levels(lm.dat$Meet)[i], "odd"))
abline(h=0,col="black",lty=2)
data2 <- lm.dat[lm.dat$Meet==levels(lm.dat$Meet)[i] & lm.dat$oddeven=="even",]
boxplot(data2$value~data2$Lane, xlab="Lane", ylab="Split differences (sec)",ylim=c(-1,1),
main=c(levels(lm.dat$Meet)[i],"even"))
abline(h=0,col="black",lty=2)
}
modela
data <- lm.dat[lm.dat$Meet_ID=="Wo2013",]
oddeven +
)
model <- lmer(value ~ oddeven + Lane + oddeven*Lane + (1|SID), data=data, REML=FALSE))
model <- lmer(value ~ oddeven + Lane + oddeven*Lane + (1|SID), data=data, REML=FALSE)
summary(model)
str(lm.dat)
lm.dat$Lane <- as.factor(lm.dat$Lane)
model <- lmer(value ~ oddeven + Lane + oddeven*Lane + (1|SID), data=data, REML=FALSE)
summary(model)
str(lm.dat)
data <- lm.dat[lm.dat$Meet_ID=="Wo2013",]
model <- lmer(value ~ oddeven + Lane + oddeven*Lane + (1|SID), data=data, REML=FALSE)
summary(model)
for(e in 1:length(levels(lm.dat$Meet_ID))){
data <- lm.dat[lm.dat$Meet_ID==levels(lm.dat$Meet_ID)[e],]
data$Lane <- as.factor(data$Lane)
data <- data[which(data$Lane != "0" & data$Lane != "9"),]
data <- na.omit(data)
modela <- lmer(value ~ Lane + oddeven + oddeven*Lane + (1|SID), data=data, REML=FALSE)
#modelb <- lmer(value ~ oddeven*Lane + (1 + Lane|SID), data=data, REML=FALSE)
#anova(modela,modelb)
#summary(modela)
fixed <- as.data.frame(summary(modela)$coeff)  # fixed effects
random <- as.data.frame(VarCorr(modela)) # random effects
sdInt <- random[1,5] # sdcor of Intercept
sdRes <- random[2,5] # sdcor of residuals
#pro <- profile(modela)  # liklihood ratio test statistic
#xyplot(pro, absVal=TRUE, absVal=TRUE, conf = c(0.95, 0.99), aspect = 1.3, layout = c(3,1))  # profile zeta plot
#CI <- confint(modela, method = "boot")  # confidence intervals, also "Wald" and "profile" methods
CI <- CI.list[[e]]
CI <- as.data.frame(CI)
CI$slope <- NA
CI[1,3] <- sdInt
CI[2,3] <- sdRes
CI[3:18,3] <- fixed[,1]
CI$upper <- CI[,2]
CI$lower <- CI[,1]
CI <- CI[c("lower","2.5 %","slope","97.5 %","upper")]
# Calculate expected values for each Lane X OddEven combination
expected <- matrix(nrow=8, ncol=2)
colnames(expected) <- c("even","odd")
rownames(expected) <- sort(unique(data$Lane))
expected <- as.data.frame(expected)
expected[1,1] <- fixed[1,1] # Lane 1, Even
expected[2,1] <- expected[1,1] + fixed[3,1] # Lane 2, Even
expected[3,1] <- expected[1,1] + fixed[4,1] # Lane 3, Even
expected[4,1] <- expected[1,1] + fixed[5,1] # Lane 4. Even
expected[5,1] <- expected[1,1] + fixed[6,1] # Lane 5, Even
expected[6,1] <- expected[1,1] + fixed[7,1] # Lane 6, Even
expected[7,1] <- expected[1,1] + fixed[8,1] # Lane 7, Even
expected[8,1] <- expected[1,1] + fixed[9,1] # Lane 8, Even
expected[1,2] <- expected[1,1] + fixed[2,1] # Lane 1, Odd
expected[2,2] <- expected[1,2] + fixed[10,1] + fixed[3,1] #Lane 2, Odd
expected[3,2] <- expected[1,2] + fixed[11,1] + fixed[4,1] #Lane 3, Odd
expected[4,2] <- expected[1,2] + fixed[12,1] + fixed[5,1] #Lane 4, Odd
expected[5,2] <- expected[1,2] + fixed[13,1] + fixed[6,1] #Lane 5, Odd
expected[6,2] <- expected[1,2] + fixed[14,1] + fixed[7,1] #Lane 6, Odd
expected[7,2] <- expected[1,2] + fixed[15,1] + fixed[8,1] #Lane 7, Odd
expected[8,2] <- expected[1,2] + fixed[16,1] + fixed[9,1] #Lane 8, Odd
# Lower CI of even effects for each lane
expected$even.l <- NA
expected[1,3] <- CI[3,1]  #Lane 1, Even, Lower limit
j = 5
for(i in 2:8){
expected[i,3] <- expected[1,3] + CI[j,1]
j = j + 1
}
# Upper CI of even effects for each lane
expected$even.u <- NA
expected[1,4] <- CI[3,5] #Lane 1, Even, Upper limit
j = 5
for(i in 2:8){
expected[i,4] <- expected[1,4] + CI[j,5]
j = j + 1
}
# Lower CI of odd effects for each lane
expected$odd.l <- NA
expected[1,5] <- CI[3,1] + CI[4,1] #Lane 1, Odd, Lower
j = 5
k = 12
for(i in 2:8){
expected[i,5] <- expected[1,5] + CI[j,1] + CI[k,1]
j = j + 1
k = k + 1
}
# Upper CI of odd effects for each lane
expected$odd.u <- NA
expected[1,6] <- CI[3,5] + CI[4,5] #Lane 1, Odd, Upper
j = 5
k = 12
for(i in 2:8){
expected[i,6] <- expected[1,6] + CI[j,5] + CI[k,5]
j = j + 1
k = k + 1
}
# add two more columns, repeating the upper and lower confidence limits, to be used in the boxplot stats
expected$even.lo <- expected$even.l
expected$even.uo <- expected$even.u
expected$odd.lo <- expected$odd.l
expected$odd.uo <- expected$odd.u
expected <- expected[c("even.lo","even.l","even","even.u","even.uo","odd.lo","odd.l","odd","odd.u","odd.uo")]
bxp.dat <- as.data.frame(cbind(t(expected[,1:5]),t(expected[,6:10])))
colnames(bxp.dat) <- c("e1","e2","e3","e4","e5","e6","e7","e8","o1","o2","o3","o4","o5","o6","o7","o8")
bxp.dat <- bxp.dat[c("e1","o1","e2","o2","e3","o3","e4","o4","e5","o5","e6","o6","e7","o7","e8","o8")]
# Plot the difference of effects odd - even for each lane, represents the interaction
b.plot <- boxplot(data$value~data$oddeven + data$Lane,plot=FALSE) # Plot the same kind of graph (we will use the underlying $stats structure)
b.plot$stats <- as.data.frame(b.plot$stats)
b.plot$stats <- bxp.dat
boxplot(b.plot$stats, ylim=c(-1.0,1.0),at=c(1,2,4,5,7,8,10,11,13,14,16,17,19,20,22,23),whisklty=0,
staplelty=0, col=c("white","grey"),axes=FALSE,main=levels(lm.dat$Meet_ID)[e])
legend("bottomright",c("even","odd"),fill=c("white","grey"),cex=.8,bty="n", horiz=TRUE)
title(xlab="Lane",line=2.5)
title(ylab="Effect on split consistency (sec)",line=2.5)
axis(1,at=c(0,30),labels=c("",""),pos=-1.0,lwd.ticks=0)
axis(1,at=seq(1.5,23.5,3),labels=c(1,2,3,4,5,6,7,8),pos=-1.0,lwd=0, lwd.ticks=1)
axis(2,at=c(-1.0,1.0),labels=c("",""),pos=0,lwd.ticks=0)
axis(2,at=seq(-1.0,1.0,.5),labels=c(-1.0,-0.5,0.0,0.5,1.0),pos=0,lwd=0, lwd.ticks=1)
abline(h=0,col="black",lty=2)
}
flowvol <- read.csv("wilhite.csv", header=T)
head(flowvol)
plot(flowvol$Flow,flowvol$Volume, xlim=rev(range(flowvol$Volume)))
plot(flowvol$Volume,flowvol$Flow, xlim=rev(range(flowvol$Volume)))
plot(flowvol$Volume,flowvol$Flow)
max(flowvol$Volume)
plot((5.93-flowvol$Volume),flowvol$Flow)
plot((5.93-flowvol$Volume),flowvol$Flow, xlim=rev(range(5.93-flowvol$Volume)))
plot((5.93-flowvol$Volume),flowvol$Flow, xlim=rev(range(5.93-flowvol$Volume)), type="l")
vol2 <- 5.93-flowvol$Volume
vol2 <- 5.93-flowvol$Volume
plot(vol2,flowvol$Flow, xlim=rev(range(vol2), type="l")
N=100
X1 = array(1:N, dim=c(N,1))
f = 2
X2 = sin(2*pi*(X1/N)*f)
plot(X2,type="l",xlab="time")
X3 = array( 0, dim=c(N,1))
X3[N/2]=1
plot(X3,type="l",xlab="time")
SX3=array( 0, dim=c(N,1))
sum = 0
for (index in 1:N) {
sum = sum + X3[index]
SX3[index] = sum
}
plot(SX3,type="l",xlab="time")
std = 1
X4 = array(std*rnorm(N), dim=c(N,1))
X5 = X2+X4
plot(X5,type="l",xlab="time")
X = SX3
F = c(.75,.25,-.5,.7)
F = array( F, dim = c(2,2))
F
eigen(F)
F = c(.9,-.5,1,0)
F = array( F, dim = c(2,2))
F
eigen(F)
F = c(1.9,-.5,1,0)
F = array( F, dim = c(2,2))
F
eigen(F)
F = c(1.9,-.5,1,10)
F = array( F, dim = c(2,2))
F
eigen(F)
F = c(.9,-.5,1,0)
F = array( F, dim = c(2,2))
F
eigen(F)
paste("test1","test2")
paste(2003,0201)
paste(as.character(2003),as.character(0201))
paste(sprintf("%s%s",2003,0201))
paste(sprintf("%s%s",2003,as.character(0201)))
as.numeric(paste(sprintf("%s%s",2003,as.character(0201))))
as.numeric(paste(sprintf("%s%06d",2003,0201)))
as.numeric(paste(sprintf("%s%04d",2003,0201)))
test <- c(8,9,11,14,15,16,17)
test2 <- c(seq(6:17,1))
test2 <- c(seq(6,17,1))
test %in% test2
test2 %in% test
sum(test2 %in% test)
test2 <- seq(6,17,1)
test2
test2 <- seq(14,17,1)
test %in% test2
sum(test2 %in% test)
swmrid <- c()
swmrid
c(swmrid,293487)
swmrid <- c(swmrid,293487)
swmrid
swmrid <- c(swmrid,293487)
swmrid
test %in% test2
test2 %in% test
test[(test %in% test2)]
test < cbind(c(5,6,3,7,8,2,9),test)
test
test <- cbind(c(5,6,3,7,8,2,9),test)
test
test <- as.data.frame(test)
test
test[(test[,2] %in% test2),]
2115395/781249
i=111
query <- paste(sprintf("%s%s","SELECT * FROM Bestage WHERE swimmer_id=",i))
query
12*60
names <- read.csv("kojima.csv",header=TRUE)
head(names)
names <- read.csv("kojima.csv",header=TRUE)
head(names)
names <- read.csv("kojima.csv",header=TRUE)
head(names)
events <- c(1,2,3,12,15,18,21)
scale(events)
(mean(events)-events)/(sd(events)/sqrt(length(events)))
(mean(events)-events)/(sd(events))
distFS <- lanebias[ which(lanebias$Distance == 50 & lanebias$Course == "LC"),]
rm(distFS)
sprints <- lanebias[ which(lanebias$Distance == 50 & lanebias$Course == "LC"),]
nrow(sprints)
names(sprints)
head(sprints)
sprints <- sprints[,-25:-53]
names(sprints)
# Add Meet_ID column
sprints$Meet_ID <- paste(substring(sprints[,1],1,2),sprints[,5],sep="")
sprints$Meet_ID <- as.factor(sprints$Meet_ID)
# US Nats in 2011 had lanes 1-10. Recode to 0-9 to be consistent with World Champs in 2011 and 2013.
sprints$Lane[ which(sprints$Meet_ID=="US2011")] <- sapply(sprints$Lane[ which(sprints$Meet_ID=="US2011")],"-",1)
sprints$Lane[ which(sprints$Meet_ID=="US2011")] <- sapply(sprints$Lane[ which(sprints$Meet_ID=="US2011")],"-",1)
head(sprints)
plot(sprints[(sprints$Stroke=="FS"),24])
boxplot(sprints[(sprints$Stroke=="FS"),24])
sprints[(sprints$Stroke=="FS"&sprints$S1>49),24]
sprints[(sprints$Stroke=="FS"&sprints$S1>49),]
sprints[(sprints$Stroke=="FS"&sprints$S1>49&sprints$Stage=="p"),]
boxplot(sprints[(sprints$Stroke=="FS"&sprints$Stage=="p"),24])
boxplot(sprints[(sprints$Stroke=="FS"&sprints$Stage=="f"),24])
boxplot(sprints[(sprints$Stroke=="FS"&sprints$Stage=="sf"),24])
boxplot(sprints[(sprints$Stroke=="FS"&sprints$Stage=="p"),24])
which(sprints[(sprints$Stroke=="FS"&sprints$S1>49),])
sprints[which(sprints$Stroke=="FS"&sprints$S1>49),]
sprints[c(1667,9449,11987),]
which(sprints$Stroke=="FS"&sprints$S1>49)
sprints[c(418,4636,6048),24] <- NA
which(sprints$Stroke=="FS"&sprints$S1>49)
boxplot(sprints[(sprints$Stroke=="FL"),24])
which(sprints$Stroke=="FL"&sprints$S1>40)
ind <- which(sprints$Stroke=="FL"&sprints$S1>40)
sprints[ind,24] <- NA
boxplot(sprints[(sprints$Stroke=="BK"),24])
ind <- which(sprints$Stroke=="BK"&sprints$S1>45)
sprints[ind,24] <- NA
boxplot(sprints[(sprints$Stroke=="BR"),24])
ind <- which(sprints$Stroke=="BR"&sprints$S1>53)
sprints[ind,24] <- NA
sprints[,25] <- scale(sprints[,24])
boxplot(sprints[(sprints$Stroke=="BR"),25])
names(sprints)
colnames(sprints)[25]
for(i in unique(sprints$Stroke)){
sprints[(sprints$Stroke==i),25] <- scale(sprints[(sprints$Stroke==i),24])
}
boxplot(sprints[(sprints$Stroke=="BR"),25])
colnames(sprints)[25] <- "scaled"
for(i in unique(sprints$Meet_ID)){
for(j in c("M","W")){
for(k in unique(sprints$Stroke)){
dat <- sprints[(sprints$Sex==j&sprints$Meet_ID==i&sprints$Stroke==k),]
plot(dat$Lane,dat[,25],type="p", main=paste(j," ",i," ",k))
}
}
}
str(sprints)
for(i in unique(sprints$Meet_ID)){
for(j in c("M","W")){
for(k in unique(sprints$Stroke)){
dat <- sprints[(sprints$Sex==j&sprints$Meet_ID==i&sprints$Stroke==k),]
plot(dat[,25]~dat$Lane,type="p", main=paste(j," ",i," ",k))
}
}
}
for(i in unique(sprints$Meet_ID)){
for(j in c("M","W")){
for(k in unique(sprints$Stroke)){
dat <- sprints[(sprints$Sex==j&sprints$Meet_ID==i&sprints$Stroke==k),]
boxplot(dat[,25]~dat$Lane,type="p", main=paste(j," ",i," ",k))
}
}
}
dat <- sprints[(sprints$Sex==j&sprints$Meet_ID==i&sprints$Stroke==k),]
nrow(dat)
str(sprints)
j
k
i
for(i in unique(sprints$Meet_ID)){
for(j in c("M","W")){
for(k in unique(sprints$Stroke)){
dat <- sprints[(sprints$Sex==j&sprints$Meet_ID==i&sprints$Stroke==k),]
if(nrow(dat)>0){
boxplot(dat[,25]~dat$Lane,type="p", main=paste(j," ",i," ",k))
}
}
}
}
library("XML")
install.packages("XML")
install.packages("RSelenium")
library("XML")
library("RSelenium")
url = "http://usaswimming.org/DesktopDefault.aspx?TabId=1482&Alias=Rainbow&Lang=en"
RSelenium::checkForServer()
RSelenium::startServer()
pJS <- phantom(extras = c('--ssl-protocol=tlsv1'))
browser <- remoteDriver()
browser$open(silent=T) #silent=T ...if want browser in background
browser$open()
getwd()
test <- c("3","4","5","...")
as.integer(test)
test[3]
test[5]
test[6]
usas.50fs <- as.data.frame(ncol=16)
colnames(usas.50fs) <- c("Time","Alt_time","Points","Name","Foreign","Age","LSC","Team","Meet","Standard","Sex","Season","Event_dist","Event_stroke","Course","Zone")
usas.50fs <- as.data.frame(ncol=16,nrow=1)
usas.50fs <- as.matrix(ncol=16,nrow=1)
usas.50fs <- data.frame(ncol=16)
colnames(usas.50fs) <- c("Time","Alt_time","Points","Name","Foreign","Age","LSC","Team","Meet","Standard","Sex","Season","Event_dist","Event_stroke","Course","Zone")
usas.50fs
usas.50fs <- matrix(ncol=16)
colnames(usas.50fs) <- c("Time","Alt_time","Points","Name","Foreign","Age","LSC","Team","Meet","Standard","Sex","Season","Event_dist","Event_stroke","Course","Zone")
usas.50fs
class(usas.50fs)
usas.50fs <- as.data.frame(usas.50fs)
class(usas.50fs)
usas.50fs
sqrt(pi/2)
install.packages("lme4")
library(lme4)
install.packages("plotly")
devtools::install_github("ropensci/plotly")
install.packages(devtools)
install.packages("devtools")
install.packages("plyr")
gwtwd()
getwd()
getwd()
head(x)
md_file <- function(input) {
sub('Rmd$', 'md', input)
}
# file path to export it to '_posts'
outfile_name <- function(input) {
output <- substr(input, 6, nchar(input))
output <- md_file(output)
paste0('~/Documents/Jekyll_website/_posts/', output)
}
# knit Rmd into dirty md
knit_post <- function(input, base.url = "/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
# output file
#  output <- outfile_name(input)
# make md file and figs
output <- paste0('~/Documents/Jekyll_website/blog/Rmd/', md_file(input))
input <- paste0('~/Documents/Jekyll_website/blog/Rmd/', input)
knit(input, output, envir = parent.frame())
}
# extract dirty yaml header and clean it
parse_yaml_header <- function(infile = '') {
num_line <- 0
yaml <- c()
repeat {
scanned <- scan(infile, what = "", sep = "\n",
nlines = 1, skip = num_line, quiet = TRUE,
blank.lines.skip = FALSE)
if (scanned == '') break
yaml <- c(yaml, scanned)
num_line = num_line + 1
}
# removing hashes '#'
sub('#', '', yaml)
}
# clean a dirty post
clean_post <- function(infile) {
print(infile)
outfile <- outfile_name(infile)
print(outfile)
infile <- paste0('~/Documents/Jekyll_website/blog/Rmd/', infile)
print(infile)
header <- parse_yaml_header(infile)
skip_lines <- length(header)
rmd_post <- readLines(infile)
post <- c(header, rmd_post[-(1:skip_lines)])
writeLines(post, con = outfile)
}
# the whole enchilada
blog_post <- function(infile) {
knit_post(infile)
mdfile <- md_file(infile)
clean_post(mdfile)
file.remove(paste0('~/Documents/Jekyll_website/blog/Rmd/', mdfile))
}
setwd("~/Documents/Jekyll_website/blog/Rmd")
blog_post("code-2016-06-05-lm.Rmd")
# blog_post("code-2014-04-26-HRV-VO2max.Rmd")
# blog_post("code-2015-10-19-crocodile-pro
blog_post("code-2016-06-05-lm.Rmd")
